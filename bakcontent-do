#!/usr/bin/env python2

import sys
import os
import os.path
import stat
import errno
import subprocess
from bakcontent_common import *

NPROCS = 4

def remove_nobakcontent_meta_dir(histdir, root):
    try:
        mfn = os.path.join(histdir, root)
        shutil.rmtree(mfn, ignore_errors=True)
    except EnvironmentError, e:
        if e.errno == errno.ENOENT:
            pass  # Skip.
        else:
            raise e

def remove_extra_meta_files(histdir, root, files, dirs):
    try:
        hist_entries = set(os.listdir(os.path.join(histdir, root)))
    except EnvironmentError, e:
        if e.errno in [errno.ENOENT, errno.ENOTDIR]:
            return
        else:
            raise e

    hist_entries.difference_update(files)
    hist_entries.difference_update(dirs)

    for m in hist_entries:
        try:
            mfn = os.path.join(histdir, root, m)
            if m == '.git' and os.path.normpath(root) == '.':
                continue

            st = os.lstat(mfn)
            if stat.S_ISDIR(st.st_mode):
                shutil.rmtree(mfn, ignore_errors=True)
            else:
                os.unlink(mfn)
        except EnvironmentError, e:
            if e.errno == errno.ENOENT:
                pass  # Skip disappeared.
            else:
                raise e

def flush_queue(q, procs, current):
    pr = procs[current]
    current = (current + 1) % len(procs)

    pr.stdin.write('\n'.join(q) + '\n')
    q = []
    return q, current

def queue_files(q, procs, current, root, files):
    for f in files:
        if root is not None:
            f = os.path.join(root, f)
        q.append(f)

        if len(q) >= 16:
            pr = procs[current]
            current = (current + 1) % len(procs)

            pr.stdin.write('\n'.join(q) + '\n')
            q = []
    return q, current

def isolate_directories(root, mixed_set):
    dirs = set()
    for f in list(mixed_set):
        ff = f
        if root is not None:
            ff = os.path.join(root, f)
        if os.path.isdir(ff):
            mixed_set.remove(f)
            dirs.add(f)
    return mixed_set, dirs

def try_listdir(path):
    try:
        return os.listdir(path)
    except EnvironmentError, _:
        return []

def find_all_files(d, wd=None):
    r = []
    for root, _, files in os.walk(os.path.join(wd, d)):
        rel_root = root
        if wd is not None:
            rel_root = os.path.relpath(root, start=wd)

        for f in files:
            r.append(os.path.join(rel_root, f))
    return r

def main() :
    if len(sys.argv) < 3:
        eprint("Usage: %s <.bakcontent> <cmd> [args...]" % sys.argv[0])
        exit(1)

    bakdir = sys.argv[1]
    cmd = sys.argv[2]
    further_args = sys.argv[3:]

    if not os.path.isabs(bakdir):
        eprint("'%s' must be an absolute path" % bakdir)
        exit(1)
    if not os.path.isdir(bakdir):
        eprint("'%s' must be a directory" % bakdir)
        exit(1)

    # Drop priviledges to minimum.
    st = os.stat(bakdir)
    os.setgid(st.st_gid)
    os.setuid(st.st_uid)

    rootdir = get_rootdir(bakdir)
    histdir = os.path.join(bakdir, 'history')
    path_base = '.'

    if cmd == 'snapshot':
        with pushdir(histdir):
            e = shell("git rm -rf --cached --ignore-unmatch * > /dev/null")
            if e:
                exit(e)
    elif cmd == 'diff':
        if len(further_args) > 0:
            path_base = further_args[0]
    elif cmd == 'checkout':
        if len(further_args) > 0:
            path_base = further_args[0]

    # Make sure the subprocesses run in 'rootdir'
    with pushdir(rootdir):
        procs = [subprocess.Popen(
            "bakcontent-do-files %d %s %s %s" % (worker_id, bakdir, cmd, ' '.join(further_args)), \
                    close_fds=True, shell=True, stdin=subprocess.PIPE, bufsize=8192) \
                    for worker_id in range(NPROCS)]
        current = 1 % len(procs)  # worker 0 may have something special to do first.

    for pr in procs:
        e = pr.poll()
        if e:
            eprint("subprocess bakcontent-do-files failed with '%s'" % e)
            exit(e)

    fns = []
    if not os.path.isdir(path_base):
        fns.append(path_base)
        # os.walk will do nothing when not on a dir.

    with pushdir(rootdir):
        for root, dirs, files in os.walk(path_base):
            if os.path.exists(os.path.join(root, '.nobakcontent')):
                del dirs[:]
                if cmd == 'snapshot':
                    remove_nobakcontent_meta_dir(histdir, root)
                continue
            try:
                dirs.remove('.bakcontent')
            except ValueError:
                pass

            fns, current = queue_files(fns, procs, current, root, files)

            if cmd == 'diff' or cmd == 'checkout':
                histdir_root = os.path.relpath(os.path.join(histdir, root))
                only_hfiles = set(try_listdir(histdir_root))
                only_hfiles -= set(files)
                if root == '.':
                    only_hfiles.discard('.git')
                only_hfiles, only_hdir = isolate_directories(histdir_root, only_hfiles)
                fns, current = queue_files(fns, procs, current, root, only_hfiles)
                for d in only_hdir:
                    fns, current = queue_files(fns, procs, current, root,
                            find_all_files(d, wd=histdir_root))

            elif cmd == 'snapshot':
                remove_extra_meta_files(histdir, root, files, dirs)

    fns, current = flush_queue(fns, procs, current)

    for pr in procs:
        pr.stdin.close()

    for pr in procs:
        e = pr.wait()
        if e:
            eprint("subprocess bakcontent-do-files failed with '%s'" % e)
            exit(e)

    if cmd == 'snapshot':
        with pushdir(histdir):
            e = shell("git add -A . > /dev/null")
            if e:
                eprint("Error in git add")
                exit(e)

            # Returns 1 if there is nothing to commit.
            ignore = shell("git commit -m. > /dev/null")

            e = shell("git clean -fd > /dev/null")
            if e:
                eprint("Error in git clean")
                exit(e)

            e = shell("git gc &> /dev/null")
            if e:
                eprint("Error in git gc")
                exit(e)

    elif cmd == 'store-sync':
        pass
    elif cmd == 'diff':
        pass
    elif cmd == 'checkout':
        pass
    else:
        eprint("Error: invalid command '%s'" % cmd)
        exit(1)

if __name__ == '__main__':
    try:
        main()
    except Exception, e:
        eprint(str(type(e)), str(e))
        exit(1)

#!/usr/bin/env python2

import sys
import os
import os.path
import errno
import hashlib
import stat
import re
from common import *

def compute_sha512(st, fn):
    h = hashlib.sha512()

    try:
        if stat.S_ISLNK(st.st_mode):
            h.update(os.readlink(fn))
            return h.hexdigest()

        with open(fn) as f:
            while True:
                buf = f.read(256*1024)
                h.update(buf)
                if len(buf) < 256*1024:
                    break
    except EnvironmentError, e:
        if e.errno == errno.EPERM:
            eprint("Warning: snapshost: cannot read (Operation not permitted): %s" % fn)
        raise e

    return h.hexdigest()

def meta_fn(histdir, fn):
    return os.path.join(histdir, fn)

def forcemakedirs(histdir, dn):
    try:
        trymakedirs(dn)
        return
    except OSError, e:
        if e.errno not in [errno.EEXIST, errno.ENOTDIR]:
            raise e

    stem = ''
    for p in os.path.split(dn):
        stem = os.path.join(stem, p)
        if os.path.isfile(stem):
            assert stem.startswith(histdir)
            os.remove(stem)
            break
    trymakedirs(dn)

def meta_write_if_necessary(histdir, mfn, sha512, st):
    content = sha512 + '\n' + ("v1 %lu %lu %lu %lu %.6f %.6f\n" \
            % (st.st_size, st.st_mode, st.st_uid, st.st_gid, st.st_mtime, st.st_ctime))

    try:
        with open(mfn) as f:
            existing = f.read()
            if content == existing:
                return
    except EnvironmentError, ignore:
        pass

    forcemakedirs(histdir, os.path.dirname(mfn))
    with atomicopenw(mfn) as out:
        out.write(content)

class IgnoredException(Exception):
    pass

def meta_parse(m):
    try:
        meta = {}
        lines = m.split('\n')
        meta['sha512'] = lines[0].strip()
        f = lines[1].split()
        if f[0] != 'v1':
            eprint("Error: Unsupport meta format version '%s'" % f[1])
        meta['st_size'] = long(f[1])
        meta['st_mode'] = long(f[2])
        meta['st_uid'] = long(f[3])
        meta['st_gid'] = long(f[4])
        meta['st_mtime'] = float(f[5])
        meta['st_ctime'] = float(f[6])
        return meta
    except IndexError, e:
        raise IgnoredException()
    except ValueError, e:
        raise IgnoredException()

def lazy_sha512(histdir, fn, st=None):
    mfn = meta_fn(histdir, fn)
    try:
        with open(mfn) as f:
            meta = meta_parse(f.read())

        if st is None:
            st = os.lstat(fn)
        if st.st_size == meta['st_size'] \
                and round(st.st_mtime, 6) == meta['st_mtime'] \
                and round(st.st_ctime, 6) == meta['st_ctime']:
            return meta['sha512']
    except EnvironmentError, e:
        pass
    except IgnoredException, ignore:
        # e.g. format error, corrupted file.
        pass

    if st is None:
        st = os.lstat(fn)
    return compute_sha512(st, fn)

def snapshot_one(histdir, fn):
    try:
        st = os.lstat(fn)
        sha512 = lazy_sha512(histdir, fn, st=st)

        mfn = meta_fn(histdir, fn)
        meta_write_if_necessary(histdir, mfn, sha512, st)
    except EnvironmentError, e:
        # Skip.
        pass

def store_one(store, histdir, fn):
    try:
        sha512 = lazy_sha512(histdir, fn)
        store.archive(sha512, fn)
    except EnvironmentError, e:
        # Skip.
        pass

def main():
    if len(sys.argv) < 4:
        eprint("Usage: %s <worker-id> <.bakcontent/> <cmd> [args...]" % sys.argv[0])
        exit(1)

    worker_id = int(sys.argv[1])
    bakdir = sys.argv[2]
    cmd = sys.argv[3]

    if not os.path.isdir(bakdir):
        eprint("Error: '%s' is not a directory" % bakdir)
        exit(1)
    histdir = os.path.join(bakdir, 'history')

    if cmd == 'snapshot':
        trymakedirs(histdir)
        for fn in sys.stdin:
            snapshot_one(histdir, fn.rstrip())

    elif cmd == 'store-sync':
        if len(sys.argv) != 5:
            eprint("Usage: %s <worker-id> <.bakcontent/> store <store>")
            exit(1)
        store = Store(bakdir, sys.argv[4])

        if worker_id == 0:
            store.archive_history()

        for fn in sys.stdin:
            store_one(store, histdir, fn.rstrip())

    else:
        eprint("Invalid command '%s'" % cmd)
        exit(1)

if __name__ == '__main__':
    try:
        main()
    except Exception, e:
        eprint(str(e))
        exit(e)
